# -*- coding: utf-8 -*-
"""Beast cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jh0BG8fin1hjAwUdeh-8e9SzNpxaBwww
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

df = pd.read_csv('data.csv')
df.head()

df.info()

df.describe()

df.drop(columns=['id', 'Unnamed: 32'], inplace=True)

df.head()

X = df.drop(columns=['diagnosis'])
y = df['diagnosis']

X

y

y.value_counts()

X.hist(figsize = (20,15));

scaler = MinMaxScaler()
X = scaler.fit_transform(X)

X

encoder = LabelEncoder()
y = encoder.fit_transform(y)
y

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, shuffle=True, random_state=42)

model = Sequential([
    Dense(16, activation='relu', input_dim=30),

    Dense(8, activation='relu'),

    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=200, validation_split=0.2)

tr_acc = history.history['accuracy']
tr_loss = history.history['loss']
val_acc = history.history['val_accuracy']
val_loss = history.history['val_loss']

epochs = [i+1 for i in range(len(tr_acc))]

plt.figure(figsize=(20, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs, tr_loss, 'r', label='Train Loss')
plt.plot(epochs, val_loss, 'b', label='Valid Loss')
plt.title('Loss')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel('Loss')

plt.subplot(1, 2, 2)
plt.plot(epochs, tr_acc, 'r', label='Train Accuracy')
plt.plot(epochs, val_acc, 'b', label='Valid Accuracy')
plt.title('Accuracy')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel('Accuracy')

plt.tight_layout()
plt.show()

y_pred = model.predict(X_test)

y_pred =(y_pred > 0.5) #to make it 0 or 1 as y_test is 0 or 1

cm = confusion_matrix(y_test, y_pred)
cm

sns.heatmap(cm, annot=True)
plt.show()

Accuracy =model.evaluate(X_test, y_test)[1]
Loss = model.evaluate(X_test, y_test)[0]
print("Test Accuracy:", Accuracy)
print("Loss:", Loss)

# prompt: suceer rate of the beast cancer

# Calculate success rate
success_rate = (cm[0][0] + cm[1][1]) / len(y_test)

# Print success rate
print("Success rate:", success_rate)

# prompt: crate a beast cancer image

import matplotlib.pyplot as plt

# Create a figure and axes object
fig, ax = plt.subplots()

# Set the title of the plot
ax.set_title("Beast Cancer Image")

# Create a list of colors for the bars
colors = ["red", "green"]

# Create a list of the number of patients with and without beast cancer
data = [50, 50]

# Create a bar chart
ax.bar(range(len(data)), data, color=colors)

# Set the labels for the x-axis
ax.set_xticks(range(len(data)))
ax.set_xticklabels(["Without Beast Cancer", "With Beast Cancer"])

# Show the plot
plt.show()